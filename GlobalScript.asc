// main global script file
// bools
bool picklestoldJoke = false;
bool helpedPickles = false;
bool helpedDebra = false;
bool helpedAlex = false;
bool helpedTerry = false;

// called when the game starts, before the first room is loaded
function game_start()
{
  // register a GUI to use for the inventory bar
  TwoClickHandler.InventoryGUI = gInventoryBar;

  // register a Label to use for action text
  TwoClickHandler.ActionLabel = lblAction;

  // optionally set the popup distance for the inventory bar
  //TwoClickHandler.PopupProportional = 0.5;
  //TwoClickHandler.PopupDistance = 50;

  // optionally reverse the left and right mouse buttons
  //TwoClickHandler.ReversedClicks = true;
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
}

// open a GUI
function open_gui(GUI* gui_to_open)
{
  TwoClickHandler.Close();
  mouse.UseModeGraphic(eModeWalkto);
  gui_to_open.Visible = true;
}

// hide a GUI
function close_gui(GUI *gui_to_close)
{
  gui_to_close.Visible = false;
  mouse.UseDefaultGraphic();
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
}

function show_save_game_dialog()
{
  // get the list of save games
  lstSaveGamesList.FillSaveGameList();

  if (lstSaveGamesList.ItemCount > 0)
  {
    // if there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // no save games yet, so default to empty text
    txtNewSaveName.Text = "";
  }

  open_gui(gSaveGame);
}

function show_restore_game_dialog()
{
  lstRestoreGamesList.FillSaveGameList();
  open_gui(gRestoreGame);
}

// called when a key is pressed
function on_key_press(eKeyCode keycode, int mod)
{
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      close_gui(gExitGame);
    }
    else if (gRestoreGame.Visible)
    {
      close_gui(gRestoreGame);
    }
    else if (gSaveGame.Visible)
    {
      close_gui(gSaveGame);
    }
    else
    {
      // Escape will prompt to exit the game
      open_gui(gExitGame);
    }
  }
  else if (IsGamePaused())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyQ && (mod & eKeyModCtrl))
  {
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {
    // F5 will open the save game dialog
    show_save_game_dialog();
  }
  else if (keycode == eKeyF7)
  {
    // F7 will open the restore game dialog
    show_restore_game_dialog();
  }
  else if (keycode == eKeyF9)
  {
    // F9 will restart the game
    RestartGame();
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (mod & eKeyModCtrl)
  {
    if (keycode == eKeyS)
    {
      // Ctrl-S will give the player all defined inventory items
      Debug(0, 0);
    }
    else if (keycode == eKeyV)
    {
      // Ctrl-V will show game engine version and build date
      Debug(1, 0);
    }
    else if (keycode == eKeyA)
    {
      // Ctrl-A will show walkable areas
      Debug(2, 3);
    }
    else if (keycode == eKeyX)
    {
      // Ctrl-X will let the player teleport to any room
      Debug(3, 0);
    }
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  // all clicks handled by TwoClickHandler script
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
  if (param == 1)
  {
    if (picklestoldJoke == true) {
      dialog[1].SetOptionState(3, eOptionOn);
    }
  } else if (param == 2)
  {
    picklestoldJoke = true;
    
  } else if (param == 3)
  {
    helpedPickles = true;
    
  } else if (param == 4)
  {
    helpedDebra = true;

  } else if (param == 5)
  {
    helpedAlex = true;

  } else if (param == 6)
  {
    helpedTerry = true;

  } else if (param == 7)
  {
    obtainedHotdog = true;
    
  } else if (param == 8)
  {
    isHuman = true;

  } else if (param == 9)
  {
    isCat = true;

  } else if (param == 10)
  {
    isLizard = true;
    
  } else if (param == 11)
  {
    isHuman = false;
    
  } else if (param == 12)
  {
    isCat = false;
    
  } else if (param == 13)
  {
    isLizard = false;
    
  } else if (param == 14)
  {
    helpedDebraforAlex = true;
  } else if (param == 15)
  {
    if (helpedDebra == true) {
      dialog[13].SetOptionState(3, eOptionOn);
    }
  } else if (param == 16) 
  {
    obtainedHotdog = false;
  }
}

// called when processclick wasn't handled anywhere else
function unhandled_event (int what, int type)
{
  if (what == 1) // Unhandled events for HOTSPOTS
  {
    if (type == 1) // look
    {
      player.Say("I see nothing special about it.");
    }
    else if (type == 2) // interact
    {
      player.Say("I can't do anything with it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That won't do anything.");
    }
  }
  else if (what == 2) // Unhandled events for OBJECTS
  {
    if (type == 0) // look
    {
      player.Say("Looks alright.");
    }
    else if (type == 1) // interact
    {
      player.Say("I don't want to have it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's a funny idea.");
    }
  }
  else if (what == 3) // Unhandled events for CHARACTERS
  {
    if (type == 0) // look
    {
      player.Say("Hm.");
    }
    else if (type == 1) // interact
    {
      player.Say("Got nothing to say.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("I don't think I should give that away.");
    }
  }
  else if (what == 5) // Unhandled events for INVENTORY ITEMS
  {
    if (type == 0) // look
    {
      player.Say("It's just some junk in my inventory.");
    }
    else if (type == 1) // interact
    {
      player.Say("Er, no?");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's ridiculous.");
    }
  }
}

function btnInvUp_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvDown_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnExitGame_OnClick(GUIControl *control, MouseButton button)
{
  open_gui(gExitGame);
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int i = 0;

  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }

    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    i ++;
  }

  // find first free save slot, starting with slot 1
  i = 1;

  while (i < 999)
  {
    if (!slots[i])
    {
      return i;
    }

    i ++;
  }

  // no free slots found
  return -1;
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);

  if (gameSlotToSaveInto < 0)
  {
    Display("No more free save slots!");
  }
  else
  {
    SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
    close_owning_gui(control);
  }
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }

  close_owning_gui(control);
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // pressing Return in the text box simulates clicking the save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

function Num0_OnClick(GUIControl *control, MouseButton button)
{
  EnterNumber("0");
}
function Num1_OnClick(GUIControl *control, MouseButton button)
{
  EnterNumber("1");
}
function Num2_OnClick(GUIControl *control, MouseButton button)
{
  EnterNumber("2");
}
function Num3_OnClick(GUIControl *control, MouseButton button)
{
  EnterNumber("3");
}
function Num4_OnClick(GUIControl *control, MouseButton button)
{
  EnterNumber("4");
}
function Num5_OnClick(GUIControl *control, MouseButton button)
{
  EnterNumber("5");
}
function Num6_OnClick(GUIControl *control, MouseButton button)
{
  EnterNumber("6");
}
function Num7_OnClick(GUIControl *control, MouseButton button)
{
  EnterNumber("7");
}
function Num8_OnClick(GUIControl *control, MouseButton button)
{
  EnterNumber("8");
}
function Num9_OnClick(GUIControl *control, MouseButton button)
{
  EnterNumber("9");
}
function EnterButton_OnClick(GUIControl *control, MouseButton button)
{
  CheckNumPadSolved();
}
function BackButton_OnClick(GUIControl *control, MouseButton button)
{
  DeleteNumPadLastNumber();
}

function gNumPad_OnClick(GUI *theGui, MouseButton button)
{
  gNumPad.Visible = false; //Closes out of the puzzle when the player clicks outside of it.
}

function cTerry_Interact()
{
  if (helpedTerry == true)
  {
    aGorillaLaughingSounds.Play();
    cTerry.Say("Terry thank you.");
  }  else {
    aGorillaSound.Play();
    dDialogTerry.Start();
  }
}

function cTerry_Look()
{
  player.Say("(Terry looks back at you with cold eyes.)");
}

function cPickles_Interact()
{
  if (helpedPickles == true)
  {
    aZebraSounds.Play();
    cPickles.Say("Did you tell the joke to someone else yet?");
  } else {
    aZebraSounds.Play();
    dDialogPickles.Start();
  }
}

function cPickles_Look()
{
  player.Say("(He seems bright and happy. I wonder if I can get anything out of him.)");
}

function cAlex_Look()
{
  player.Say("(Aww he's so cute!)");
}

function cAlex_Interact()
{
  if (helpedDebraforAlex == true)
  {
    aOcelotSounds.Play();
    cAlex.Say("Thanks for helping her.");
  } else if (obtainedHotdog == true) {
    dGiveAlex.Start();
  } else if (helpedAlex == true) {
    aOcelotSounds.Play();
    cAlex.Say("Thanks for the delicious food!");
  } else {
    aOcelotSounds.Play();
    dDialogAlex.Start();
  }
}

function cDebra_Interact()
{
  if (helpedDebra == true)
  {
    aLizardSounds.Play();
    cDebra.Say("Don't know what licking the amulet did but hopefully it helps");
  } else {
    aLizardSounds.Play();
    dDialogDebra.Start();
  }
}

function cDebra_Look()
{
  player.Say("(She seems lonely. Doesn't seem much for conversation right now.)");
}

function cMaximus_Interact()
{
  dDialogMaximus.Start();
}

function cMaximus_Look()
{
  player.Say("(It's him! Maximus! The famous cat singer that 'died' 20 years ago!)");
}

function cHotdog_Interact()
{
  aHotDogSound.Play();
  dDialogHotdog.Start();
}

function Exit_OnClick(GUIControl *control, MouseButton button)
{
  gCredits.Visible = false;
}
function cTerry_UseInv()
{
  switch(player.ActiveInventory)
  {
    case iStuffedAnimal:
      player.Say("He just gave it to me. Why would I give it back?");
      break;
    default:
      player.Say("He doesn't seem to want it.");
      break;
  }
}

function cDebra_UseInv()
{
  switch(player.ActiveInventory)
  {
    case iStuffedAnimal:
      aLizardSounds.Play();
      player.LoseInventory(iStuffedAnimal);
      helpedDebraforAlex = true;
      dGiveStuffedAnimal.Start();
      break;
    default:
      aLizardSounds.Play();
      player.Say("She doesn't seem to want it.");
      break;
  }
}

function iAmulet_Interact()
{
  dDialogAmulet.Start();
}
